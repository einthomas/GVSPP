#version 460

#include "rt/defines.glsl"

struct Sample {
    int triangleID;
    vec3 rayOrigin;
    vec3 rayHitPos;
    vec3 pos;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0, set = 0) uniform isampler2DArray ids;
layout(binding = 1, set = 0) buffer writeonly sampleOutputBuffer {
    Sample sampleOutput[];
};
layout(binding = 2, set = 0) uniform cubePosUniform {
    vec3 cubePos;
};
layout(binding = 3, set = 0) buffer writeonly numSamplesBuffer {
    int numSamples;
};
layout(binding = 4, set = 0) buffer setBuffer {
    int set[];
};
layout(binding = 5, set = 0) buffer triangleCounterBuffer {
    uint triangleCounter;
    uint rsTriangleCounter;
    uint rayCounter;
    uint rsRayCounter;
    uint pvsSize;
};

#include "rt/gpuHashSet.glsl"

void main() {
    // Texture fetches are batched, as suggested in https://developer.nvidia.com/blog/the-peak-performance-analysis-method-for-optimizing-any-gpu-workload/#appendix2
    const int triangleID0 = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, 0), 0).x);
    const int triangleID1 = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, 1), 0).x);
    const int triangleID2 = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, 2), 0).x);
    const int triangleID3 = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, 3), 0).x);
    const int triangleID4 = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, 4), 0).x);

    if (insert(triangleID0)) sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID0, cubePos, vec3(0.0f), vec3(0.0f));
    if (insert(triangleID1)) sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID1, cubePos, vec3(0.0f), vec3(0.0f));
    if (insert(triangleID2)) sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID2, cubePos, vec3(0.0f), vec3(0.0f));
    if (insert(triangleID3)) sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID3, cubePos, vec3(0.0f), vec3(0.0f));
    if (insert(triangleID4)) sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID4, cubePos, vec3(0.0f), vec3(0.0f));

    /*
    for (int i = 0; i < 5; i++) {
        const int triangleID = int(texelFetch(ids, ivec3(gl_GlobalInvocationID.xy, i), 0).x);
        if (insert(triangleID)) {
            //sampleOutput[atomicAdd(numSamples, 1)] = Sample(triangleID, cubePos, vec3(0.0f), vec3(0.0f));
            sampleOutput[atomicAdd(numSamples, 1)] = Sample(cubePos, vec3(0.0f), triangleID);
        }
    }
    */
}
